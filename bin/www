#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');  
var path = require('path'); 
var fs = require('fs')
var https = require('https'); 
const WebSocket = require('../src/modules/socket/websocket') 
/**
 * Get port from environment and store in Express.
 */
 

var port = normalizePort(process.env.PORT || '80'); 
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app); 


var io = require('socket.io')(server, {
  path:'/chat', 
  serveClient: true,
  // below are engine.IO options
  pingInterval: 10000,
  pingTimeout: 5000,
  cookie: false
});  

io.on('connection',(socket=>{ 
  let token = socket.handshake.query.token;
  if (!token) {
    delete io.sockets.sockets[socket.id]
  }else{ 
    let newsocket = new WebSocket(socket,io); 
  }
})) 

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

  
/**
 * Create HTTPS server.
 */ 
const key_path = path.resolve(__dirname,'../https/www.popochiu.com.key')
const cert_path = path.resolve(__dirname,'../https/www.popochiu.com.pem')

if (fs.existsSync(key_path) && fs.existsSync(cert_path) ) {
  const httpsOption = {
    key: fs.readFileSync(key_path),
    cert: fs.readFileSync(cert_path)
  }
  var httpsserver =  https.createServer(httpsOption, app);

  var httpsio = require('socket.io')(httpsserver, {
    path:'/chat', 
    serveClient: true,
    // below are engine.IO options
    pingInterval: 10000,
    pingTimeout: 5000,
    cookie: false
  });  
  
  httpsio.on('connection',(socket=>{ 
    let token = socket.handshake.query.token;
    if (!token) {
      delete httpsio.sockets.sockets[socket.id]
    }else{ 
      let newsocket = new WebSocket(socket,httpsio); 
    }
  })) 

  httpsserver.listen(443);
  httpsserver.on('error', onError);
  httpsserver.on('listening', onListening);
}






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
